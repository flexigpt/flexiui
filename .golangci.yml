# Linters last analyzed with golangci-lint v1.63.4
# Most of the defaults in the config are good enough for run
run:
  timeout: 10m

  # Tags used to build code with. Negatory of this
  build-tags:
    - codeanalysis

issues:
  # Setting 0 to have all the results. Good to be have all issues once the initial lint is stable.
  max-issues-per-linter: 0

  # Same here, nothing should be skipped to not miss errors.
  max-same-issues: 0

  # Which dirs to exclude
  exclude-dirs:
    - pkgts

linters:
  enable:
    # Check for pass []any as any in variadic func(...any). Rare case but good to have.
    - asasalint

    # Use plain ASCII identifiers.
    - asciicheck

    # Checks for dangerous unicode character sequences. Rare case but good to have.
    - bidichk

    # Checks whether HTTP response body is closed successfully.
    - bodyclose

    # Check whether the function uses a non-inherited context.
    - contextcheck

    # Detect if loop vars are copied
    - copyloopvar

    # Find duplicate words. Rare case but good to have.
    - dupword

    # Check for two durations multiplied together.
    - durationcheck

    # Forces to not skip error check.
    - errcheck

    # Checks `Err-` prefix for var and `-Error` suffix for error type.
    - errname

    # Suggests to use `%w` for error-wrapping and other post 1.13 directives of Is, As etc.
    - errorlint

    # Finds forced type assertions.
    - forcetypeassert

    # Finds repeated strings that could be replaced by a constant.
    - goconst

    # Meta linter with lots of great checks
    - gocritic

    # Forces to put `.` at the end of the comment. Code is poetry.
    - godot

    # formatter
    - gofumpt

    # Powerful security-oriented linter. But requires some time to
    # configure it properly, see https://github.com/securego/gosec#available-rules
    - gosec

    # Linter that specializes in simplifying code.
    - gosimple

    # Official Go tool. Must have.
    - govet

    # Group declarations, for import, const, var, etc.
    - grouper

    # Detects when assignments to existing variables are not used
    - ineffassign

    # Fix all the misspells, amazing thing.
    - misspell

    # Enforce tags in un/marshaled structs.
    - musttag

    # Finds naked/bare returns and requires change them.
    - nakedret

    # Both require a bit more explicit returns.
    - nilerr
    - nilnil

    # Finds sending HTTP request without context.Context.
    - noctx

    # Forces comment why another check is disabled.
    # Better not to have //nolint: at all ;)
    - nolintlint

    # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - perfsprint

    # Finds slices that could potentially be pre-allocated.
    # Small performance win + cleaner code.
    - prealloc

    # Finds shadowing of Go's predeclared identifiers.
    # I hear a lot of complaints from junior developers.
    # But after some time they find it very useful.
    - predeclared

    # Checks that package variables are not reassigned.
    # Super rare case but can catch bad things (like `io.EOF = nil`)
    - reassign

    # Drop-in replacement of `golint`.
    - revive

    # Somewhat similar to `bodyclose` but for `database/sql` package.
    - rowserrcheck
    - sqlclosecheck

    # Meta linter
    - staticcheck

    # Test-related checks. All of them are good.
    - tenv
    - tparallel

    # Remove unnecessary type conversions, make code cleaner
    - unconvert

    # Finds unused declarations.
    - unused

    # Detect the possibility to use variables/constants from stdlib.
    - usestdlibvars

    # Finds wasted assignment statements.
    - wastedassign

  disable:
    # Checks whether net/http.Header uses canonical header. Most probably good to have but not my use case
    - canonicalheader

    # Detects struct containing context.Context field. Not a problem.
    - containedctx

    # Checks function and package cyclomatic complexity.
    # I can have a long but trivial switch-case.
    #
    # Cyclomatic complexity is a measurement, not a goal.
    # (c) Bryan C. Mills / https://github.com/bcmills
    - cyclop

    # Check declaration order of types, constants, variables, and functions.
    - decorder

    # Checks if package imports are in a list of acceptable packages.
    # I'm very picky about what I import, so no automation.
    - depguard

    # Checks assignments with too many blank identifiers.
    - dogsled

    # Tool for code clone detection.
    - dupl

    # Error lint covers all things from this and more.
    - err113

    # I'm fine to check the error from json.Marshal.
    - errchkjson

    # Forces to handle more cases in enums.
    - exhaustive

    # Forces to handle more cases in structs.
    - exhaustruct

    # Detects functions from golang.org/x/exp/ that can be replaced by standard functions.
    # I don't prefer using exp at all.
    - exptostd

    # Detects nested contexts in loops and function literals.
    - fatcontext

    # Forbids some identifiers. I don't have a case for it.
    - forbidigo

    # Function length checker. I might have long but a simple function.
    - funlen

    # Imports sorter. Can stomp on gofumpt's feet. Just gofumpt is good enough.
    - gci

    # I'm not a fan of ginkgo and gomega packages.
    - ginkgolinter

    # Checks that compiler directive comments (//go:) are valid. Very rare.
    - gocheckcompilerdirectives

    # Checks if globals or init is present. Globals and init() are okay.
    - gochecknoglobals
    - gochecknoinits

    # Similar to cyclop linter (see above).
    - gocognit
    - gocyclo

    # TODO and friends are okay.
    - godox

    # Checks if the code is formatted according to gofmt.
    # I already use gofumpt, so gofmt is redundant.
    - gofmt

    # I don't use file headers.
    - goheader

    # Checks if code and import statements are formatted according to goimports.
    # gofumpt handles formatting, so goimports is redundant.
    - goimports

    # Allowed/blocked packages to import. I prefer to do it manually.
    - gomodguard

    # Manages the use of replace, retract, and exclude directives in go.mod.
    - gomoddirectives

    # Reports certain internationalization anti-patterns.
    - gosmopolitan

    # Printf-like functions must have 'f' at the end. Not useful to me.
    - goprintffuncname

    # Detects the incorrect use of interfaces to avoid interface pollution.
    - iface

    # Checks import alias consistency. Very rare.
    - importas

    # Reports interfaces with unnamed method parameters.
    - inamedparam

    # Forces tiny interfaces, very subjective.
    - interfacebloat

    # Finds places where for-loops could use an integer range.
    - intrange

    # Accept interfaces, return concrete types. Not always.
    - ireturn

    # Reports long lines.
    # Using golines with gofumpt as base formatter takes care of this.
    # This is not really AST-based, so it has issues with long struct tags, etc.
    - lll

    # Some log checkers might be useful. I tend to use log/slog.
    - loggercheck

    # Maintainability index of each function, subjective.
    - maintidx

    # Slice declarations with non-zero initial length. Not my case.
    - makezero

    # Reports wrong mirror patterns of bytes/strings usage.
    - mirror

    # Detects magic numbers.
    - mnd

    # Deeply nested if statements, subjective.
    - nestif

    # Reports constructs that check 'err != nil' but return a different nil value error.
    - nilnesserr

    # Checks for a new line before return and branch statements to increase code clarity.
    - nlreturn

    # Reports all named returns, not that bad.
    - nonamedreturns

    # Finds misuse of Sprintf with host:port in a URL. Cool but rare.
    - nosprintfhostport

    # I don't use t.Parallel() that much.
    - paralleltest

    # Lint your Prometheus metrics name.
    - promlinter

    # Reports direct reads from proto message fields when getters should be used.
    - protogetter

    # Checks for receiver type consistency.
    - recvcheck

    # Ensures consistent code style when using log/slog.
    - sloglint

    # Checks for mistakes with OpenTelemetry/Census spans.
    - spancheck

    # Is a replacement for golint, similar to revive.
    - stylecheck

    # Checks that struct tags are well aligned.
    - tagalign

    # Checks the struct tags.
    - tagliatelle

    # Forces the use of a separate _test package. Often non-_test package is okay.
    - testpackage

    # Makes you add t.Helper() as the first line in test helpers.
    - thelper

    # Expects testable examples.
    - testableexamples

    # Covered by revive.
    - unparam

    # Reports uses of functions with replacements inside the testing package.
    - usetesting

    # I'm fine with long variable names with a small scope.
    - varnamelen

    # Checks for unnecessary newlines at the start and end of functions.
    # gofmt and gofumpt cover that.
    - whitespace

    # Wrap all errors from external packages.
    - wrapcheck

    # Forces you to use empty lines.
    - wsl

    # Detects the wrong usage of zerolog where a user forgets to dispatch with Send or Msg.
    - zerologlint

linters-settings:
  errcheck:
    # Report `a := b.(MyStruct)` when `a, ok := ...` should be.
    check-type-assertions: true # Default: false

  nakedret:
    # No naked returns, ever.
    max-func-lines: 0 # Default: 30

  revive:
    rules:
      - name: unused-parameter
        # Too noisy
        disabled: true
