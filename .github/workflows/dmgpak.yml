name: 'MacOS Build and Package'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '0.0.1'

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        platform:
          - darwin/universal
    permissions:
      contents: write
    env:
      BUILD_NAME: 'FlexiGPT'
      BUILD_PLATFORM: 'darwin/universal'
      WAILS_VERSION: 'v2.9.2'
      WAILS_BUILD_WEBVIEW2: 'download'
      GO_VERSION: '^1.23.2'
      NODE_VERSION: '20.x'
      PNPM_VERSION: '9'
      APP_WORKING_DIRECTORY: '.'
      GON_SIGN_JSON_PATH: './packaging/darwin/gon-sign.json'
      GON_SIGN_NOTARIZE_PATH: './packaging/darwin/gon-notarize.json'
      SIGN_MACOS_APPLE_USERNAME: ${{ secrets.APPLE_USERNAME || '' }}
      SIGN_MACOS_APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD || '' }}
      SIGN_MACOS_APP_ID: "${{ secrets.SIGN_MACOS_APP_ID || '' }}"
      SIGN_MACOS_APP_CERT: "${{ secrets.SIGN_MACOS_APP_CERT || '' }}"
      SIGN_MACOS_APP_CERT_PASSWORD: "${{ secrets.SIGN_MACOS_APP_CERT_PASSWORD || '' }}"
      SIGN_MACOS_INSTALLER_ID: "${{ secrets.SIGN_MACOS_INSTALLER_ID || '' }}"
      SIGN_MACOS_INSTALLER_CERT: ${{ secrets.MACOS_INSTALLER_CERT || '' }}
      SIGN_MACOS_INSTALLER_CERT_PASSWORD: ${{ secrets.MACOS_INSTALLER_CERT_PASSWORD || '' }}
      BUILD_COMMAND: 'pnpm run build:mac'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup GoLang
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@${{ env.WAILS_VERSION }}
        shell: bash

      - name: Install macOS Wails deps
        run: brew install mitchellh/gon/gon
        shell: bash

      - name: Build macOS App
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        run: ${{ env.BUILD_COMMAND }}
        shell: bash

      - name: Add macOS permissions
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        run: chmod +x build/bin/*/Contents/MacOS/*
        shell: bash

      - name: Import Code-Signing Certificates for macOS
        if: env.SIGN_MACOS_APP_CERT != '' && startsWith(github.ref, 'refs/tags/')
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          keychain-password: ${{ env.SIGN_MACOS_APPLE_PASSWORD }}
          p12-file-base64: ${{ env.SIGN_MACOS_APP_CERT }}
          p12-password: ${{ env.SIGN_MACOS_APP_CERT_PASSWORD }}

      - name: Import Code-Signing Certificates for macOS installer
        if: env.SIGN_MACOS_APP_CERT != '' && startsWith(github.ref, 'refs/tags/')
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          keychain-password: ${{ env.SIGN_MACOS_APPLE_PASSWORD }}
          p12-file-base64: ${{ env.SIGN_MACOS_INSTALLER_CERT }}
          p12-password: ${{ env.SIGN_MACOS_INSTALLER_CERT_PASSWORD }}
          create-keychain: false

      - name: Sign macOS binary
        if: env.SIGN_MACOS_APP_ID != '' && startsWith(github.ref, 'refs/tags/')
        shell: bash
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        run: |
          echo "Signing Package"
          gon -log-level=info ${{ env.GON_SIGN_JSON_PATH }}

      - name: Build .app zip file
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        shell: bash
        run: |
          ditto -c -k --sequesterRsrc --keepParent build/bin/${{ env.BUILD_NAME }}.app build/bin/${{ env.BUILD_NAME }}.app.zip

      - name: Build Installer Signed
        if: env.SIGN_MACOS_INSTALLER_ID != '' && startsWith(github.ref, 'refs/tags/')
        shell: bash
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        run: |
          productbuild --sign '${{ env.SIGN_MACOS_INSTALLER_ID }}' --component build/bin/${{ env.BUILD_NAME }}.app build/bin/${{ env.BUILD_NAME }}-macos-universal.pkg

      - name: Build Installer Unsigned
        if: env.SIGN_MACOS_INSTALLER_ID == ''
        shell: bash
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        run: |
          productbuild --component build/bin/${{ env.BUILD_NAME }}.app build/bin/${{ env.BUILD_NAME }}-macos-universal.pkg

      - name: Notarize Installer and zip
        if: env.SIGN_MACOS_APP_CERT != '' && startsWith(github.ref, 'refs/tags/')
        shell: bash
        working-directory: ${{ env.APP_WORKING_DIRECTORY }}
        run: |
          gon -log-level=info ${{ env.GON_SIGN_NOTARIZE_PATH }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/') != true
        with:
          name: ${{ env.BUILD_NAME }}-macos-universal
          path: |
            build/bin/${{ env.BUILD_NAME }}-macos-universal.pkg

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/bin/${{ env.BUILD_NAME }}-macos-universal.pkg
